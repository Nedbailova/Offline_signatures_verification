avg_acc = 0;
avg_class_acc = zeros(25,1);
thresh_par = 25;
oct_num = 4;
scales_num = 7;

for k=1:25
sign_class = k;

Origfiles = dir(strcat('original/', string(sign_class)));
dirIndex1 = [Origfiles.isdir];
fileList_orig = {Origfiles(~dirIndex1).name}';

Genuinefiles = dir(strcat('valid2/', string(sign_class)));
dirIndex2 = [Genuinefiles.isdir];
fileList_genuine = {Genuinefiles(~dirIndex2).name}';

Forgedfiles = dir(strcat('valid2/', string(sign_class), '_f'));
dirIndex3 = [Forgedfiles.isdir];
fileList_forged = {Forgedfiles(~dirIndex3).name}';

count_orig = size(fileList_orig);
s1 = count_orig(1);

crits = zeros(s1, 1);
ideal_range = zeros(s1, 1);

for j = 1:s1
  I1=imread(strcat('original/', string(sign_class), '/', fileList_orig{j}));
  points1 = detectSURFFeatures(I1, "MetricThreshold", thresh_par, "NumOctaves", oct_num, "NumScaleLevels", scales_num);
  total_points = size(points1);
  total_points = total_points(1);
  [f1,vpts1] = extractFeatures(I1,points1, 'Method', 'SURF');

  count_gen = size(fileList_genuine);
  s2 = count_gen(1);
  H_g = zeros(s2, 1);
  if (j == 1)
    crit_g = zeros(s2, 1);
  end

  count_forg = size(fileList_forged);
  s3 = count_forg(1);
  H_f = zeros(s3, 1);
  if (j == 1)
    crit_f = zeros(s3, 1);
  end

  for i = 1:s2
    I2=imread(strcat('valid2/', string(sign_class), '/', fileList_genuine{i}));
    points2 = detectSURFFeatures(I2, "MetricThreshold", thresh_par, "NumOctaves", oct_num, "NumScaleLevels", scales_num);
    [f2,vpts2] = extractFeatures(I2,points2, 'Method', 'SURF');
    indexPairs = matchFeatures(f1,f2, "Unique", true, "MatchThreshold", 100, "MaxRatio", 0.5);
    matches = size(indexPairs);
    H_g(i, 1) = matches(1);
  end

  for i = 1:s3
    I2=imread(strcat('valid2/', string(sign_class), '_f/', fileList_forged{i}));
    points2 = detectSURFFeatures(I2, "MetricThreshold", thresh_par, "NumOctaves", oct_num, "NumScaleLevels", scales_num);
    [f2,vpts2] = extractFeatures(I2,points2, 'Method', 'SURF');
    indexPairs = matchFeatures(f1,f2, "Unique", true, "MatchThreshold", 100, "MaxRatio", 0.5);
    matches = size(indexPairs);
    H_f(i, 1) = matches(1);
  end

  a1 = min(H_g);
  a2 = max(H_f);

  if (a2 <= a1)
    crits(j, 1) = (a1 + a2)/2;
  else
    crits(j, 1) = a1 - (1/2);
  end

  if (a1 > a2)
    ideal_range(j, 1) = 1;
  end

  com_case = s2 + s3;
  right_case = 0;

  for i = 1:s2
    if (H_g(i, 1) >= crits(j, 1))
      crit_g(i, 1) = crit_g(i, 1) + 1;
    else
      crit_g(i, 1) = crit_g(i, 1) - 1;
    end
  end

  for i = 1:s3
    if (H_f(i, 1) < crits(j, 1))
      crit_f(i, 1) = crit_f(i, 1) - 1;
    else
      crit_f(i, 1) = crit_f(i, 1) + 1;
    end
  end
end

for i = 1:s2
  if (crit_g(i, 1) > 0)
    right_case = right_case + 1;
  end
end

for i = 1:s3
  if (crit_f(i, 1) <= 0)
    right_case = right_case + 1;
  end
end

save(strcat('criterion/', string(sign_class), '.txt'), 'crits', '-ascii')
avg_class_acc(k, 1) = right_case/com_case;
end

avg_acc = mean(avg_class_acc)